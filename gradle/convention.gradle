subprojects { project ->
	apply plugin: 'java' // Plugin as major conventions

	sourceCompatibility = 1.6
    
    [ compileJava, compileTestJava, javadoc ]*.options*.encoding = 'UTF-8'
	
	task sourcesJar(type: Jar, dependsOn:classes) {
		from sourceSets.main.allSource
		classifier 'sources'
		extension 'jar'
	}

	task javadocJar(type: Jar, dependsOn:javadoc) {
		from javadoc.destinationDir
		classifier 'javadoc'
		extension 'jar'
	}
	
	artifacts {
		archives sourcesJar
		archives javadocJar
	}
	
	apply plugin: 'maven'
	
	uploadArchives {
		repositories.mavenDeployer {
			repository(url: mavenRepoUrl) {
				authentication(userName: mavenRepoUser, password: mavenRepoPassword)
			}
			snapshotRepository(url: mavenSnapshotRepoUrl) {
				authentication(userName: mavenSnapshotRepoUser, password: mavenSnapshotRepoPassword)
			}
		}
	}
	
	// Ensure output is on a new line
	javadoc.doFirst { println "" }
	
	configurations {
        provided {
            description = 'much like compile, but indicates you expect the JDK or a container to provide it. It is only available on the compilation classpath, and is not transitive.'
            transitive = true
            visible = true
        }
    }

    project.sourceSets {
        main.compileClasspath += project.configurations.provided
        main.runtimeClasspath -= project.configurations.provided
        test.compileClasspath += project.configurations.provided
        test.runtimeClasspath += project.configurations.provided
    }
}

task aggregateJavadoc(type: Javadoc) {
	description = 'Aggregate all subproject docs into a single docs directory'
	source subprojects.collect {project -> project.sourceSets.main.allJava }
	classpath = files(subprojects.collect {project -> project.sourceSets.main.compileClasspath})
	destinationDir = new File(projectDir, 'doc')
}

// Generate wrapper, which is distributed as part of source to alleviate the need of installing gradle
task createWrapper(type: Wrapper) {
	gradleVersion = '1.11'
}